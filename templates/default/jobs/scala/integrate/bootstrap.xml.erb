<?xml version='1.0' encoding='UTF-8'?>
<project>
<%= githubProject(
  repoUser:    @user,
  repoName:    "scala",
  repoRef:     @branch,
  description: %{ Stage a Scala distribution on sonatype using scripts/job/integrate/bootstrap.
    It builds locker and uses it to build and publish the required modules as well as the
    Scala compiler/library for this release, and generates an updated versions.properties
    that captures the modules/STARR used.

    <p> This job is run on every merge to publish a "nightly" snapshot, and on every tag, to stage a full release on sonatype.

    <p> Use github.com/scala/make-release-notes to build the release notes.
   }.gsub(/^    /, ''),
  nodeRestriction: "linux && publish",
  maxConcurrentPerNode: 1,
  buildTimeoutMinutes: 200,
  jvmVersion: @jvmVersionForBranch,
  jvmFlavor:  @jvmFlavorForBranch,
  params: [
    {:name => "SCALA_VER_BASE",
     :desc => "Specifying this parameter will cause a release to be built. If it&apos;s empty (and HEAD does not have a tag that parses as a version), a -nightly release is built."},
    {:name => "SCALA_VER_SUFFIX",
     :desc => "Empty for a final release, otherwise, e.g., -RC1 for the first RC or -M3 for the third milestone. (Will be parsed from the tag on SCALA_REF, if any.)"},
    {:name => "SCALA_BINARY_VER",
     :desc => "For binary compatible releases (such as 2.11.0 and 2.11.1), the short binary version (e.g. 2.11). Otherwise, the full Scala version."},
    {:name => "SCALA_FULL_VER",
     :desc => "For non-snapshot releases, the scala version, otherwise the closest scala version that&apos;s a valid binary version. Used to cross-version the scala continuations plugin."},
    {:name => "STARR_REF",
     :desc => "Can be set to a git ref of a separate commit that will be used to build STARR, rather than using a prebuilt STARR based on starr.version in versons.properties. Used when bootstraping compiler changes that change the ABI, e.g. changing name mangling."},
    {:name => "XML_VER",
     :desc => "The version to build for scala-xml. If the version already exists, it won&apos;t be published. If empty, it will be parsed from versions.properties (unless moduleVersioning != &quot;versions.properties&quot;)."},
    {:name => "PARSERS_VER",
     :desc => "The version to build for scala-parser-combinators. If the version already exists, it won&apos;t be published. If empty, it will be parsed from versions.properties (unless moduleVersioning != &quot;versions.properties&quot;)."},
    {:name => "CONTINUATIONS_VER",
     :desc => "The version to build for scala-continuations-plugin and -library. The plugin will be cross-versioned with SCALA_FULL_VER. If the version already exists, it won&apos;t be published. If empty, it will be parsed from versions.properties (unless moduleVersioning != &quot;versions.properties&quot;)."},
    {:name => "SWING_VER",
     :desc => "The version to build for scala-swing. If the version already exists, it won&apos;t be published.
    If empty, it will be parsed from versions.properties (unless moduleVersioning != &quot;versions.properties&quot;)."},
    {:name => "ACTORS_MIGRATION_VER",
     :desc => "The version to build for scala-partest. If the version already exists, it won&apos;t be published. If empty, it will be parsed from versions.properties (unless moduleVersioning != &quot;versions.properties&quot;)."},
    {:name => "PARTEST_VER",
     :desc => "The version to build for scala-partest. If the version already exists, it won&apos;t be published. If empty, it will be parsed from versions.properties (unless moduleVersioning != &quot;versions.properties&quot;)."},
    {:name => "SCALACHECK_VER",
     :desc => "The version to build for scalacheck. Not published. If empty, it will be parsed from versions.properties (unless moduleVersioning != &quot;versions.properties&quot;)."},
    {:name => "AKKA_ACTOR_VER",
     :desc => "The version of akka-actors to include in scala-library-all.pom. NOTE: the release script will NOT build akka, the version specified here needs to be released already. If empty, it will be parsed from versions.properties."},
    {:name => "JLINE_VER",
     :desc => "The version of jline to use for building the Scala project.NOTE: the release script will NOT build jline, the version specified here needs to be released already.If empty, it will be parsed from versions.properties."},
    {:name => "moduleVersioning",
     :desc => "Set to anything but &quot;versions.properties&quot; to build the latest HEAD for all modules."},
    {:name => "publishToSonatype",
     :desc => "Set to anything but &quot;yes&quot; to avoid publishing to sonatype. Otherwise, release builds (tagged or SCALA_VER_BASE defined) will be published."}
  ])
%>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>versions.properties,jenkins.properties,logs/**</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
</project>
